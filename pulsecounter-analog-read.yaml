esphome:
  name: pulsecounter_analog_read
  platform: ESP8266
  # board: esp12e
  board: d1_mini
  includes:
    - includes/util.h

<<: !include common/substitutions.yaml
packages: 
  wifi: !include common/wifi.yaml
  mqtt: !include common/mqtt.yaml
  management: !include common/management.yaml

substitutions:
  status_led: GPIO2
  icon_sun_nok : "☼"
  icon_sun_ok : "❄"
  icon_elevation_ok : "✓"
  icon_elevation_nok : "✗"

globals:   
  - id: rpmsPerKwh
    type: long
    initial_value: '96'
  - id: wattValue
    type: long
    initial_value: '0'
  - id: unlocked_sun
    type: boolean
    initial_value: 'false'
  - id: unlocked_time
    type: boolean
    initial_value: 'false'
    
time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Berlin
    on_time:
      - seconds: 0
        minutes: /1
        # example condition with then/else and globals.set (see sun elevation how to do with lambda)
        then:
          - if:
              condition:
                - lambda: |
                    auto hour = id(sntp_time).now().hour;
                    return hour < 12 || hour > 16;
              then:
                globals.set:
                  id: unlocked_time
                  value: 'true'
              else:
                globals.set:
                  id: unlocked_time
                  value: 'false'

          
sun:
  latitude: 48.777929
  longitude: 8.447560

sensor:
  - platform: wifi_signal
    name: "wifi-signal-strength"
  - platform: sun
    id: sun_elevation
    name: Sun Elevation
    type: elevation

    # example condition with lambda (see time how to do with then/else and globals.set)
    filters:
      - lambda: |-
          id(unlocked_sun) = x < 40;
          return x;
  - platform: sun
    id: sun_azimuth
    name: Sun Azimuth
    type: azimuth
  - platform: template
    id: delta
    name: "delta"
    unit_of_measurement: "ms"
    accuracy_decimals: 0
    update_interval: 0s
  - platform: template
    id: watt
    name: "watt"
    unit_of_measurement: "W"
    accuracy_decimals: 0
    update_interval: 0s
  - platform: template
    id: used
    name: "used"
    unit_of_measurement: "Wh"
    accuracy_decimals: 5
    update_interval: 0s
  - platform: adc
    id: analogvalue
    pin: A0
    update_interval: 50ms
    filters:
      - multiply: 3.3
      - or:
        - heartbeat: 1s
        - delta: 0.01
    on_value:
      - lambda: |-
          // if postitioned well the value is lower than 0.35 during silver, so try to position until the led turns off
          id(status_output).set_level((x - 0.35) / 3.3 );

binary_sensor:
  - platform: gpio
    pin: GPIO14
    name: 'power'
    filters:
      - delayed_on_off: 50 ms
    on_press:
      - lambda: |-
          static auto lastUpdate = 0;
          auto now = millis();
          if (lastUpdate != 0) {
            auto deltaMillis = now - lastUpdate;
            id(wattValue) = 60UL * 60UL * 1000UL * 1000UL / deltaMillis / id(rpmsPerKwh);
            auto wh = 1000.0F / id(rpmsPerKwh);

            id(delta).publish_state(deltaMillis);
            id(watt).publish_state(id(wattValue));
            id(used).publish_state(wh);
          }
          lastUpdate = now;
  - platform: gpio
    pin: D3
    id: abutton
    internal: true
    filters:
      - invert:
    on_press:
      - display.page.show_next: oled
      - component.update: oled
  - platform: gpio
    pin: D4
    id: bbutton
    internal: true
    filters:
      - invert:
    on_press:
      - display.page.show_previous: oled
      - component.update: oled

output:
  - platform: esp8266_pwm
    frequency: 200 Hz
    inverted: true
    pin: $status_led
    id: status_output

i2c:

font:
- file: 'fonts/Arial.ttf'
  id: arial12
  size: 12
- file: 'fonts/opens___.ttf'
  id: symbols24
  size: 24
  glyphs: "${icon_sun_nok}${icon_sun_ok}${icon_elevation_ok}${icon_elevation_nok}"

display:
  - platform: ssd1306_i2c
    model: "SSD1306 64x48"
    address: 0x3C
    rotation: 180
    id: oled
    pages:
      - id: page1
        lambda: |-
          it.printf(0, 0, id(arial12),  TextAlign::TOP_LEFT, "%.2f V", id(analogvalue).state);
          it.printf(0, 12, id(arial12), TextAlign::TOP_LEFT, "%lu Watt", id(wattValue));
      - id: page2
        lambda: |-
          it.print(0, 10, id(arial12), "Page 2");
      - id: page3
        lambda: |-
          it.print(0, 10, id(arial12), "Page 3");
          it.line(0, 0, 64, 48);
      - id: page4
        lambda: |-
          it.print(0, 10, id(arial12), "Page 4");
          it.line( 0,  0, 63,  0);
          it.line( 0,  0,  0, 47);
          it.line(63, 47, 63,  0);
          it.line(63, 47,  0, 47);
      - id: page5
        lambda: |-
          auto now = id(sntp_time).now();
          if (now.is_valid()) {
            it.filled_rectangle(0,  0, map(now.hour,   0, 23, 0, 63), 10);
            it.filled_rectangle(0, 11, map(now.minute, 0, 59, 0, 63),  6);
            it.filled_rectangle(0, 18, map(now.second, 0, 59, 0, 63),  2);
          }

          auto elevation = id(sun_elevation).state;
          if (!isnan(elevation)) {
            it.filled_rectangle(0, 22, map(elevation, 0, 90, 0, 63), 20);
          }

      - id: page6
        lambda: |-
          it.printf(0, 0, id(symbols24),  TextAlign::TOP_LEFT, "%s%s", id(unlocked_time) ? "${icon_elevation_ok}" : "${icon_elevation_nok}", id(unlocked_sun) ? "${icon_sun_ok}" : "${icon_sun_nok}");
          it.strftime(0, 24, id(arial12), "%d.%m %H:%M", id(sntp_time).now());
          it.printf(0, 36, id(arial12),  TextAlign::TOP_LEFT, "Sun %.1f°", id(sun_elevation).state);
